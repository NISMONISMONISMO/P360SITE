import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  CloudArrowUpIcon, 
  PhotoIcon, 
  XMarkIcon, 
  CheckCircleIcon,
  EyeIcon,
  EyeSlashIcon,
  InformationCircleIcon
} from '@heroicons/react/24/outline';

interface UploadFormData {
  title: string;
  description: string;
  is_public: boolean;
}

const UploadPage: React.FC = () => {
  const navigate = useNavigate();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [formData, setFormData] = useState<UploadFormData>({
    title: '',
    description: '',
    is_public: true
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const token = localStorage.getItem('access_token');
    if (!token) {
      navigate('/auth/login');
    }
  }, [navigate]);

  const validateFile = (file: File) => {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
    const maxSize = 50 * 1024 * 1024; // 50MB

    if (!allowedTypes.includes(file.type)) {
      return '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, JPEG –∏–ª–∏ PNG';
    }

    if (file.size > maxSize) {
      return '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB';
    }

    return null;
  };

  const handleFileSelect = async (file: File) => {
    const validationError = validateFile(file);
    if (validationError) {
      setError(validationError);
      return;
    }

    // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω!
    setSelectedFile(file);
    setPreviewUrl(URL.createObjectURL(file));
    setError('');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    const fileName = file.name.replace(/\.[^/.]+$/, '');
    setFormData(prev => ({ ...prev, title: fileName }));
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const removeFile = () => {
    setSelectedFile(null);
    setPreviewUrl(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const checked = (e.target as HTMLInputElement).checked;
    
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
      return;
    }

    if (!formData.title.trim()) {
      setError('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    setIsUploading(true);
    setError('');
    setSuccess('');

    try {
      const uploadFormData = new FormData();
      uploadFormData.append('file', selectedFile);
      uploadFormData.append('title', formData.title.trim());
      uploadFormData.append('description', formData.description.trim());
      uploadFormData.append('is_public', formData.is_public.toString());

      const token = localStorage.getItem('access_token');
      
      // –°–∏–º—É–ª—è—Ü–∏—è progress –±–∞—Ä–∞
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {
          if (prev >= 90) return prev;
          return prev + Math.random() * 10;
        });
      }, 200);

      const response = await fetch('http://localhost:5000/api/panoramas/upload', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: uploadFormData
      });

      clearInterval(progressInterval);
      setUploadProgress(100);

      const data = await response.json();

      if (response.ok) {
        setSuccess('–ü–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        setTimeout(() => {
          navigate('/dashboard');
        }, 2000);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setIsUploading(false);
      setUploadProgress(0);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-accent-gray via-white to-purple-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–æ—Ä–∞–º—ã</h1>
              <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—é 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –º–∏—Ä–æ–º</p>
            </div>
            <button
              onClick={() => navigate('/dashboard')}
              className="btn-secondary"
            >
              –ö –º–æ–∏–º –ø–∞–Ω–æ—Ä–∞–º–∞–º
            </button>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-12">
        <div className="max-w-4xl mx-auto">
          {/* –ü–æ–ª–µ–∑–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞–Ω–æ—Ä–∞–º */}
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6 mb-8">
            <div className="flex items-start space-x-4">
              <div className="flex-shrink-0">
                <InformationCircleIcon className="h-6 w-6 text-blue-600 mt-1" />
              </div>
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-blue-900 mb-3">
                  üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–æ—Ä–∞–º
                </h3>
                <div className="space-y-4 text-sm text-blue-800">
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <h4 className="font-semibold text-blue-900">‚ú® –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏:</h4>
                      <ul className="space-y-1 text-blue-700">
                        <li>‚Ä¢ <strong>2:1</strong> - —Å—Ç–∞–Ω–¥–∞—Ä—Ç equirectangular (–Ω–∞–ø—Ä. 4096√ó2048)</li>
                        <li>‚Ä¢ <strong>2.78:1</strong> - —à–∏—Ä–æ–∫–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã (–Ω–∞–ø—Ä. 10000√ó3600)</li>
                        <li>‚Ä¢ <strong>1.5:1</strong> - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø–∞–Ω–æ—Ä–∞–º—ã</li>
                      </ul>
                    </div>
                    <div className="space-y-2">
                      <h4 className="font-semibold text-blue-900">üì∑ –õ—É—á—à–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:</h4>
                      <ul className="space-y-1 text-blue-700">
                        <li>‚Ä¢ <strong>4K:</strong> 4096√ó2048 - –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</li>
                        <li>‚Ä¢ <strong>6K:</strong> 6144√ó3072 - –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ</li>
                        <li>‚Ä¢ <strong>8K+:</strong> 8192√ó4096+ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</li>
                      </ul>
                    </div>
                  </div>
                  
                  <div className="bg-white bg-opacity-60 rounded-lg p-4 mt-4">
                    <h4 className="font-semibold text-blue-900 mb-2">üéØ –í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</h4>
                    <ul className="space-y-1 text-blue-700">
                      <li>‚Ä¢ –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ <strong>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç</strong> –ª—é–±—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
                      <li>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è <strong>–ª—é–±—ã–µ —Ä–∞–∑–º–µ—Ä—ã</strong> - –æ—Ç 1000√ó500 –¥–æ 20000√ó10000 –∏ –±–æ–ª—å—à–µ</li>
                      <li>‚Ä¢ –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç <strong>—á–µ—Ç–∫–æ—Å—Ç—å</strong> –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏</li>
                      <li>‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤ <strong>Google Street View</strong> - –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π –∏ —à–≤–æ–≤</li>
                    </ul>
                  </div>
                  
                  <div className="flex items-center justify-center mt-4">
                    <span className="text-xs text-blue-600 bg-blue-100 px-3 py-1 rounded-full">
                      üöÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="space-y-8">
            {/* –§–∞–π–ª –∑–∞–≥—Ä—É–∑–∫–∏ */}
            <div className="card p-8">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</h2>
              
              {!selectedFile ? (
                <div
                  className={`border-2 border-dashed rounded-lg p-12 text-center transition-colors ${
                    isDragging 
                      ? 'border-primary-500 bg-primary-50' 
                      : 'border-gray-300 hover:border-primary-400'
                  }`}
                  onDrop={handleDrop}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                >
                  <CloudArrowUpIcon className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞
                  </h3>
                  <p className="text-gray-600 mb-4">–∏–ª–∏</p>
                  <button
                    type="button"
                    onClick={() => fileInputRef.current?.click()}
                    className="btn-primary"
                  >
                    –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
                  </button>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/jpeg,image/jpg,image/png"
                    onChange={handleFileInputChange}
                    className="hidden"
                  />
                  <p className="text-sm text-gray-500 mt-4">
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG (–º–∞–∫—Å 50MB)
                  </p>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="relative">
                    <img
                      src={previewUrl!}
                      alt="–ü—Ä–µ–≤—å—é –ø–∞–Ω–æ—Ä–∞–º—ã"
                      className="w-full h-64 object-cover rounded-lg"
                    />
                    <button
                      type="button"
                      onClick={removeFile}
                      className="absolute top-2 right-2 p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
                    >
                      <XMarkIcon className="h-5 w-5" />
                    </button>
                  </div>
                  <div className="flex items-center space-x-4 text-sm text-gray-600">
                    <span>–ù–∞–∑–≤–∞–Ω–∏–µ: {selectedFile.name}</span>
                    <span>–†–∞–∑–º–µ—Ä: {(selectedFile.size / 1024 / 1024).toFixed(2)} MB</span>
                  </div>
                  <div className="text-sm text-blue-600 bg-blue-50 p-2 rounded">
                    –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
                  </div>
                </div>
              )}
            </div>

            <div className="card p-8">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–Ω–æ—Ä–∞–º–µ</h2>
              <div className="space-y-6">
                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã *
                  </label>
                  <input
                    id="title"
                    name="title"
                    type="text"
                    required
                    value={formData.title}
                    onChange={handleFormChange}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã"
                  />
                </div>
                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
                    –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    rows={4}
                    value={formData.description}
                    onChange={handleFormChange}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø–∞–Ω–æ—Ä–∞–º—É..."
                  />
                </div>
                <div className="flex items-center space-x-3">
                  <input
                    id="is_public"
                    name="is_public"
                    type="checkbox"
                    checked={formData.is_public}
                    onChange={handleFormChange}
                    className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                  />
                  <label htmlFor="is_public" className="text-sm font-medium text-gray-700">
                    –°–¥–µ–ª–∞—Ç—å –ø–∞–Ω–æ—Ä–∞–º—É –ø—É–±–ª–∏—á–Ω–æ–π
                  </label>
                  {formData.is_public ? (
                    <EyeIcon className="h-5 w-5 text-green-500" />
                  ) : (
                    <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                  )}
                </div>
              </div>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <p className="text-red-600">{error}</p>
              </div>
            )}

            {success && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-center">
                <CheckCircleIcon className="h-5 w-5 text-green-500 mr-3" />
                <p className="text-green-600">{success}</p>
              </div>
            )}

            {isUploading && (
              <div className="card p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">–ó–∞–≥—Ä—É–∑–∫–∞...</h3>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className="bg-gradient-to-r from-primary-500 to-primary-600 h-3 rounded-full transition-all duration-300"
                    style={{ width: `${uploadProgress}%` }}
                  />
                </div>
                <p className="text-sm text-gray-600 mt-2">{Math.round(uploadProgress)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</p>
              </div>
            )}

            <div className="flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => navigate('/dashboard')}
                className="btn-secondary"
                disabled={isUploading}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                disabled={isUploading || !selectedFile || !formData.title.trim()}
                className="btn-primary px-8 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–Ω–æ—Ä–∞–º—É'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default UploadPage;